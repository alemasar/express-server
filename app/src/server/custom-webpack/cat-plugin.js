const { RawSource } = require("webpack-sources");
const { Source } = require("webpack-sources");
const webpack = require("webpack");
const fs = require("fs");
const path = require("path");
function MyPlugin(context) {
	this.context = context;
 }

MyPlugin.prototype.apply = function (compiler) {
	const context = this.context;
	const resourceRegExp = /\.(cat)/;
	let newResource = 'hola.js';
	compiler.hooks.normalModuleFactory.tap(
		"NormalModuleReplacementPlugin",
		nmf => {
			nmf.hooks.beforeResolve.tap("NormalModuleReplacementPlugin", result => {
				if (!result) return;
				if (resourceRegExp.test(result.request)) {
					if (typeof newResource === "function") {
						newResource(result);
					} else {
						const catFile = fs.readFileSync(
							path.resolve(context, result.request),
							'utf8'
						);
						catJSON = JSON.parse(catFile);
						newResource = catJSON[0].config.js;
						result.request = path.resolve(context, catJSON[0].config.js);

					}
				}
				return result;
			});
			nmf.hooks.afterResolve.tap("NormalModuleReplacementPlugin", result => {
				if (!result) return;
				path.resolve(
					path.dirname(result.resource),
					newResource
				);
				/*console.log()*/
				/*if (resourceRegExp.test(result.resource)) {
					console.log(newResource)
					if (typeof newResource === "function") {
						newResource(result);
					} else {
						console.log(newResource)
						result.resource = path.resolve(
							path.dirname(result.resource),
							newResource
						);
					}
				}*/
				return result;
			});
		}
	);
	//compiler.hooks.emit.tap('MyPlugin', (compilationParams, callback) => {
		// console.log(compilationParams.fileDependencies)
		/*compilationParams.fileDependencies.forEach((dependency) => {
			if (dependency.indexOf(".cat") != -1) {
				console.log(dependency)
				// dependency.replace(".cat", ".js")
				compilationParams.fileDependencies.delete(dependency);
			}
		})
		console.log(compilationParams.fileDependencies)
		compilationParams.chunks.forEach(chunk => { 
			chunk.files.forEach(filename => {
				// Get the asset source for each file generated by the chunk:
				console.log(filename)
				if (filename.indexOf(".cat")) { 
					let source = compilationParams.assets[filename].source();
					// console.log(source)
				}
			  });
		})*/
		/*compilationParams.hooks.buildModule.tap('MyPlugin', (module) => {
			console.log(module.source());
			if (module.name) {
				compilation.assets[module.name]=new RawSource(module.source().replace(/.cat/gi, ".js"));
			}
		});*/
		/*compilation.assets.forEach((asset, filename) => {
			compilation.assets[filename] = new RawSource(compilation.assets[filename].source().replace(".cat", ".js"));
		});*/
/*		compilationParams.chunks.forEach((chunk) => {
			chunk.files.forEach((filename) => { 
			for (const module of chunk.modulesIterable) {
				chunk.removeModule(module)
			}
		});*/

		// do your thing here
	// });
  /*compiler.plugin('emit', function(compilation, callback) {
    
    // Explore each chunk (build output):
    compilation.chunks.forEach(function(chunk) {
	  // Explore each module within the chunk (built inputs):
		
		for (const module of chunk.modulesIterable) {
			// module.fileDependencies.forEach(function(filepath) {
			// console.log(module.dependencies);
			chunk.removeModule(module)
			 // });
	  
		 }

      // Explore each asset filename generated by the chunk:
     chunk.files.forEach(function(filename) {
        // Get the asset source for each file generated by the chunk:
        var source = compilation.assets[filename].source();
      });
    });

    callback();
  });*/
};

module.exports = MyPlugin;